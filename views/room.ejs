<!DOCTYPE html>
<html>
    <style>
        #video-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, 300px);
            grid-auto-rows: 300px;
        }

        video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
    </style>
<body>

    <div id="video-grid"></div>

</body>
<script>
    const ROOM_ID = "<%= roomId %>";
</script>
<script src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io('/');
    const videoGrid = document.getElementById('video-grid');
    const myPeer = new Peer(undefined, {
        host: '/',
        port: '3001'
    });
    const myVideo = document.createElement('video');
    myVideo.muted = true;
    navigator.mediaDevices.getUserMedia({
        video: true,
        audio: true
    }).then(stream => {
        addVideoStream(myVideo, stream);
        myPeer.on('call', call => {
            call.answer(stream);
            const video = document.createElement('video');
            call.on('stream', userVideoStream => {
                addVideoStream(video, userVideoStream);
            });
        });
        socket.on('user-connected', userId => {
            connectToNewUser(userId, stream);
        });
    });
    myPeer.on('open', id => {
        socket.emit('join-room', ROOM_ID, id);
    });

    function connectToNewUser(userId, stream) {
        const call = myPeer.call(userId, stream);
        const video = document.createElement('video');
        call.on('stream', userVideoStream => {
            addVideoStream(video, userVideoStream);
        });
        call.on('close', () => {
            video.remove();
        });
    }

    function addVideoStream(video, stream) {
        video.srcObject = stream;
        video.addEventListener('loadedmetadata', () => {
            video.play();
        });
        videoGrid.appendChild(video);
    }
</script>
</html>